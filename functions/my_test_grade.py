from aiogram import Router, F

from aiogram.types import Message
from keyboards.reply import rmk, main_tch, main_st

from data.database import DataBase

router = Router()

@router.message(F.text.lower() == "–º–æ–∏ —Ç–µ—Å—Ç—ãüìï")
async def my_tests(message: Message):
    fl = await DataBase.check(["tg_id", "role"], message.chat.id)

    if len(fl) > 0 and [True if fl[0][1] in ["–£—á–∏—Ç–µ–ª—å"] else False][0]:
        fl = await DataBase.check(["id_teacher", "name_test", "num_class", "quantity_test", "id_test"], message.chat.id, table="test")
        if len(fl) > 0:
            await message.answer("\n\n".join([f'"{i[1]}" - —Ç–µ—Å—Ç –¥–ª—è {i[2]} –∫–ª–∞—Å—Å–∞ –Ω–∞ {i[3]} –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ–¥: {i[-1]}' for i in fl]),
                                reply_markup=main_tch)
        else:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤",
                                 reply_markup=main_tch)
    elif len(fl) == 0:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", reply_markup=rmk)
        await message.answer("/start")
    else:
        await message.answer("–í—ã –Ω–µ —É—á–∏—Ç–µ–ª—å!",
                            reply_markup=main_st)


@router.message(F.text.lower() == "–º–æ–∏ –æ—Ç–º–µ—Ç–∫–∏üìà")
async def my_tests(message: Message):
    fl = await DataBase.check(["tg_id", "role"], message.chat.id)

    if len(fl) > 0 and [True if fl[0][1] in ["–£—á–µ–Ω–∏–∫"] else False][0]:
        fl = await DataBase.check(["id_student", "name_test", "grade", "id_test"], message.chat.id, table="result_test")
        if len(fl) > 0:
            await message.answer("\n\n".join([f'"{i[1]}" - –≤–∞—à–∞ –æ—Ç–º–µ—Ç–∫–∞ –∑–∞ —ç—Ç–æ—Ç —Ç–µ—Å—Ç {i[2]} (ID: {i[-1]})' for i in fl]),
                                reply_markup=main_st)
        else:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–º–µ—Ç–æ–∫",
                                 reply_markup=main_st)
    elif len(fl) == 0:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", reply_markup=rmk)
        await message.answer("/start")
    else:
        await message.answer("–í—ã –Ω–µ —É—á–µ–Ω–∏–∫!",
                            reply_markup=main_tch)