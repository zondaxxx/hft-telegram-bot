from aiogram import Router, F

from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from keyboards.builders import generator
from keyboards.reply import rmk, main_tch, main_st

from data.database import DataBase

from utils.states import Result_test

router = Router()

@router.message(F.text == "–û—Ç–º–µ–Ω–∞‚ùå")
async def create_test(message: Message, state: FSMContext):
    await state.clear()
    fl = await DataBase.check(["tg_id", "role"], message.chat.id)

    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_tch)

@router.message(F.text.lower() == "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤üìò")
async def result_test(message: Message, state: FSMContext):
    fl = await DataBase.check(["tg_id", "role"], message.chat.id)

    if len(fl) > 0 and [True if fl[0][1] in ['–£—á–∏—Ç–µ–ª—å'] else False][0]:
        await state.set_state(Result_test.check_t)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
                            reply_markup=rmk)
    elif len(fl) == 0:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", reply_markup=rmk)
        await message.answer("/start")
    else:
        await message.answer("–í—ã –Ω–µ —É—á–∏—Ç–µ–ª—å!",
                            reply_markup=main_st)

@router.message(Result_test.check_t, F.text)
async def chek_t(message: Message, state: FSMContext):
    id = message.text
    if len(id) == 5:
        fl = await DataBase.check(["id_test", "id_teacher"], id, table="test")

        if len(fl) > 0 and fl[0][1] == message.chat.id:
            fl = await DataBase.check(["id_test", "name_test", "name_student", "grade"], id, table="result_test")

            if len(fl) > 0:
                await message.answer(f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ "{fl[0][1]}":\n' + '\n'.join([f"{i[2]} - {i[-1]}" for i in fl]),
                                     reply_markup=main_tch)
                await state.clear()
            else:
                await message.answer("–í–∞—à —Ç–µ—Å—Ç –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª",
                                     reply_markup=main_tch)
                await state.clear()

        elif len(fl) > 0:
            await message.answer("–≠—Ç–æ –Ω–µ –≤–∞—à —Ç–µ—Å—Ç!",
                                 reply_markup=main_tch)
            await state.clear()
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                 reply_markup=generator("–û—Ç–º–µ–Ω–∞‚ùå"))
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                             reply_markup=generator("–û—Ç–º–µ–Ω–∞‚ùå"))

@router.message(Result_test.check_t, ~F.text)
async def inc_chek_t(message: Message, state: FSMContext):
    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                         reply_markup=generator("–û—Ç–º–µ–Ω–∞‚ùå"))
