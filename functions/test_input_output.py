import os

from aiogram import Router, F
from bot import bot

from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from keyboards.builders import generator
from keyboards.reply import rmk, main_tch, main_st

from data.database import DataBase

from utils.validity import vl_exl
from utils.generator_id import test_name
from utils.states import Test_inp, Perform_test
from utils.question_answer import question_answer

router = Router()

@router.message(F.text == "–û—Ç–º–µ–Ω–∞‚ùå")
async def create_test(message: Message, state: FSMContext):
    await state.clear()
    fl = await DataBase.check(["tg_id", "role"], message.chat.id)

    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=(main_tch if fl[0][1] in ['–£—á–∏—Ç–µ–ª—å'] else main_st))

@router.message(F.text.lower() == "—Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Çüìó")
async def create_test(message: Message, state: FSMContext):
    fl = await DataBase.check(["tg_id", "role"], message.chat.id)

    if len(fl) > 0 and [True if fl[0][1] in ['–£—á–∏—Ç–µ–ª—å'] else False][0]:
        await state.set_state(Test_inp.num_class)
        await message.answer("–î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç?",
                            reply_markup=generator([str(i) for i in range(1, 12)]))
    elif len(fl) == 0:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", reply_markup=rmk)
        await message.answer("/start")
    else:
        await message.answer("–í—ã –Ω–µ —É—á–∏—Ç–µ–ª—å!",
                            reply_markup=main_st)


@router.message(Test_inp.num_class, F.text)
async def num_class(message: Message, state: FSMContext):
    if message.text in [str(i) for i in range(1, 12)]:
        await state.update_data(id_teacher=message.chat.id)
        await state.update_data(num_class=message.text)
        await state.set_state(Test_inp.name_test)
        await message.answer("–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à —Ç–µ—Å—Ç?",
                             reply_markup=rmk)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ –æ—Ç 1 –¥–æ 11")

@router.message(Test_inp.num_class, ~F.text)
async def inc_num_class(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ –æ—Ç 1 –¥–æ 11")


@router.message(Test_inp.name_test, F.text)
async def test_names(message: Message, state: FSMContext):
    await state.update_data(test_name=message.text)
    await state.set_state(Test_inp.id_test)
    await message.answer("–•–æ—Ä–æ—à–æ, –∞ —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xlsx, –≤ –∫–æ–ª–æ–Ω–∫–µ –ê –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, –∞ –≤ –∫–æ–ª–æ–Ω–∫–µ –í –æ—Ç–≤–µ—Ç—ã –∫ —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–∞–º")

@router.message(Test_inp.name_test, ~F.text)
async def inc_test_names(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞!")


@router.message(Test_inp.id_test, F.document)
async def download(message: Message, state: FSMContext):
    if message.document.mime_type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
        file = await bot.get_file(message.document.file_id)
        file_path = file.file_path
        name = test_name()

        await bot.download_file(file_path, "data/tests/" + name + ".xlsx")
        vlexcel = await vl_exl(name)
        if vlexcel[0]:
            await state.update_data(id_test=name)
            await state.update_data(quantity=vlexcel[1])

            data_zxc = await state.get_data()
            await state.clear()

            await DataBase.insert_test(list(data_zxc.values()))
            await message.answer("–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å–≤–æ–∏–º —É—á–µ–Ω–∏–∫–∞–º, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
            await message.answer(name, reply_markup=main_tch)
        else:
            await message.answer("–§–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É!",
                                 reply_markup=generator("–û—Ç–º–µ–Ω–∞‚ùå"))
            os.remove("data/tests/" + name + ".xlsx")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xlsx!",
                             reply_markup=generator("–û—Ç–º–µ–Ω–∞‚ùå"))

@router.message(Test_inp.id_test, ~F.document)
async def inc_download(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xlsx!",
                         reply_markup=generator("–û—Ç–º–µ–Ω–∞‚ùå"))


@router.message(F.text.lower() == "–ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—ÇüóíÔ∏è")
async def test_inp(message: Message, state: FSMContext):
    fl = await DataBase.check(["tg_id", "role"], message.chat.id)

    if len(fl) > 0 and [True if fl[0][1] in ['–£—á–µ–Ω–∏–∫'] else False][0]:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ id —Ç–µ—Å—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –¥–∞–ª —É—á–∏—Ç–µ–ª—å:", reply_markup=rmk)
        await state.set_state(Perform_test.valid_test)
    elif len(fl) == 0:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", reply_markup=rmk)
        await message.answer("/start")
    else:
        await message.answer("–¢—ã –Ω–µ —É—á–µ–Ω–∏–∫!",
                            reply_markup=main_tch)


@router.message(Perform_test.valid_test, F.text)
async def valid_test(message: Message, state: FSMContext):
    id = message.text
    fl = await DataBase.check(["id_test", "name_test", "id_teacher", "quantity_test"], id, table="test")

    if len(fl) > 0:
        th_name = await DataBase.check(["tg_id", "name"], fl[0][-2])
        await message.answer(f"–≠—Ç–æ —Ç–µ—Å—Ç –æ—Ç {th_name[0][-1]} –Ω–∞ —Ç–µ–º—É \"{fl[0][1]}\", –≤ –Ω—ë–º {fl[0][-1]} –≤–æ–ø—Ä–æ—Å–æ–≤")
        await message.answer("–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞?",
                             reply_markup=generator(["–ù–∞—á–∞—Ç—å", "–û—Ç–º–µ–Ω–∞"]))

        await state.update_data(id_stud=message.chat.id)
        await state.update_data(name_test=id)
        await state.update_data(name_test_text=fl[0][1])
        await state.update_data(id_teacher=fl[0][2])
        await state.update_data(max_test=fl[0][-1])
        await state.update_data(test_num=0)
        await state.update_data(count=0)

        await state.set_state(Perform_test.start_test)
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–π",
                             reply_markup=generator("–û—Ç–º–µ–Ω–∞‚ùå"))

@router.message(Perform_test.valid_test, ~F.text)
async def inc_valid_test(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—è—Ç–∏-—Å–∏–º–≤–æ–ª—å–Ω—ã–π –∫–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –¥–∞–ª —É—á–∏—Ç–µ–ª—å!",
                         reply_markup=generator("–û—Ç–º–µ–Ω–∞‚ùå"))


@router.message(Perform_test.start_test, F.text.lower().in_(["–Ω–∞—á–∞—Ç—å"]))
async def start_test(message: Message, state: FSMContext):
    global question, answer

    temp_data = await state.get_data()
    question, answer = await question_answer(temp_data['name_test'])

    await message.answer(f"{temp_data['test_num']+1}. {question[temp_data['test_num']]}",
                         reply_markup=rmk)
    await state.set_state(Perform_test.state_test1)

@router.message(Perform_test.start_test, F.text.lower().in_(["–æ—Ç–º–µ–Ω–∞"]))
async def start_test(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                         reply_markup=main_st)
    await state.clear()

@router.message(Perform_test.start_test, ~F.text)
async def inc_start_test(message: Message, state: FSMContext):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                         reply_markup=generator(["–ù–∞—á–∞—Ç—å", "–û—Ç–º–µ–Ω–∞"]))

@router.message(Perform_test.state_test1)
async def start_test(message: Message, state: FSMContext):
    temp_data = await state.get_data()

    if message.text.lower() == str(answer[temp_data['test_num']]).lower():
        await state.update_data(count=temp_data['count']+1)

    if temp_data['test_num']+1 < temp_data['max_test']:
        await state.update_data(test_num=temp_data['test_num'] + 1)

        temp_data = await state.get_data()
        await message.answer(f"{temp_data['test_num'] + 1}. {question[temp_data['test_num']]}")
        await state.set_state(Perform_test.state_test2)
    else:
        temp_data = await state.get_data()

        grade = round((temp_data['count']/temp_data['max_test'])*5)
        await message.answer(f"–ö–æ–Ω–µ—Ü, –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Ç–µ—Å—Ç –Ω–∞ {temp_data['count']} –∏–∑ {temp_data['max_test']}")
        await message.answer(f"–í–∞—à–∞ –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ - {grade if grade > 2 else 2}",
                             reply_markup=main_st)

        name_st = await DataBase.check(["tg_id", "name"], message.chat.id)
        await DataBase.result_test(list(temp_data.values())[0:3] + [grade if grade > 2 else 2] + [name_st[0][1]])

        zxc = await DataBase.check(["tg_id", "name", "ch_class"], temp_data['id_stud'])
        await bot.send_message(temp_data['id_teacher'],
                               f"{zxc[0][1]}, —É—á–µ–Ω–∏–∫ {zxc[0][2]} –∫–ª–∞—Å—Å–∞ –ø—Ä–æ—à–µ–ª –≤–∞—à —Ç–µ—Å—Ç –Ω–∞ {grade if grade > 2 else 2}")

        await state.clear()


@router.message(Perform_test.state_test2)
async def start_test(message: Message, state: FSMContext):
    temp_data = await state.get_data()

    if message.text.lower() == str(answer[temp_data['test_num']]).lower():
        await state.update_data(count=temp_data['count']+1)

    if temp_data['test_num']+1 < temp_data['max_test']:
        await state.update_data(test_num=temp_data['test_num'] + 1)

        temp_data = await state.get_data()
        await message.answer(f"{temp_data['test_num'] + 1}. {question[temp_data['test_num']]}")
        await state.set_state(Perform_test.state_test1)
    else:
        temp_data = await state.get_data()

        grade = round((temp_data['count'] / temp_data['max_test']) * 5)
        await message.answer(f"–ö–æ–Ω–µ—Ü, –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Ç–µ—Å—Ç –Ω–∞ {temp_data['count']} –∏–∑ {temp_data['max_test']}")
        await message.answer(f"–í–∞—à–∞ –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ - {grade if grade > 2 else 2}",
                             reply_markup=main_st)

        name_st = await DataBase.check(["tg_id", "name"], message.chat.id)
        await DataBase.result_test(list(temp_data.values())[0:3] + [grade if grade > 2 else 2] + [name_st[0][1]])

        zxc = await DataBase.check(["tg_id", "name", "ch_class"], temp_data['id_stud'])
        await bot.send_message(temp_data['id_teacher'],
                               f"{zxc[0][1]}, —É—á–µ–Ω–∏–∫ {zxc[0][2]} –∫–ª–∞—Å—Å–∞ –ø—Ä–æ—à–µ–ª –≤–∞—à —Ç–µ—Å—Ç –Ω–∞ {grade if grade > 2 else 2}")

        await state.clear()